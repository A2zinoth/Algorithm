{\rtf1\ansi\ansicpg936\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red0\green0\blue0;\red43\green131\blue159;
\red163\green21\blue21;}
{\*\expandedcolortbl;\csgray\c100000;\csgenericrgb\c0\c0\c100000;\csgenericrgb\c0\c0\c0;\csgenericrgb\c16900\c51200\c62500;
\csgenericrgb\c63900\c8200\c8200;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17420\viewh13160\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // \
\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \CocoaLigature0 func
\fs28 \cf3  longestPalindrome(
\fs22 \cf2 _
\fs28 \cf3  s: 
\fs22 \cf4 String
\fs28 \cf3 ) -> 
\fs22 \cf4 String
\fs28 \cf3  \{\
        
\fs22 \cf2 let
\fs28 \cf3  chars = [
\fs22 \cf4 Character
\fs28 \cf3 ](s.
\fs22 \cf4 characters
\fs28 \cf3 )\
        
\fs22 \cf2 let
\fs28 \cf3  length = chars.
\fs22 \cf4 count
\fs28 \cf3 \
        
\fs22 \cf2 guard
\fs28 \cf3  length > 
\fs22 0
\fs28  
\fs22 \cf2 else
\fs28 \cf3  \{\
            
\fs22 \cf2 return
\fs28 \cf3  
\fs22 \cf5 ""
\fs28 \cf3 \
        \}\
        
\fs22 \cf2 var
\fs28 \cf3  isPalidromeMatrix = 
\fs22 \cf4 Array
\fs28 \cf3 (repeating: 
\fs22 \cf4 Array
\fs28 \cf3 (repeating: 
\fs22 \cf2 false
\fs28 \cf3 , count: length), count: length)\
        
\fs22 \cf2 var
\fs28 \cf3  maxLength = 
\fs22 0
\fs28 \
        
\fs22 \cf2 var
\fs28 \cf3  maxStartIndex = 
\fs22 0
\fs28 \
        \
        
\fs22 \cf2 for
\fs28 \cf3  palidromeLength 
\fs22 \cf2 in
\fs28 \cf3  
\fs22 1
\fs28 ...length \{\
            
\fs22 \cf2 for
\fs28 \cf3  startIndex 
\fs22 \cf2 in
\fs28 \cf3  
\fs22 0
\fs28 ...length-palidromeLength \{\
                
\fs22 \cf2 let
\fs28 \cf3  endIndex = startIndex + palidromeLength - 
\fs22 1
\fs28 \
                
\fs22 \cf2 var
\fs28 \cf3  isPalidrome = 
\fs22 \cf2 false
\fs28 \cf3 \
                \
                
\fs22 \cf2 if
\fs28 \cf3  palidromeLength == 
\fs22 1
\fs28  \{\
                    isPalidrome = 
\fs22 \cf2 true
\fs28 \cf3 \
                \} 
\fs22 \cf2 else
\fs28 \cf3  
\fs22 \cf2 if
\fs28 \cf3  palidromeLength == 
\fs22 2
\fs28  \{\
                    isPalidrome = chars[startIndex] 
\fs22 \cf4 ==
\fs28 \cf3  chars[endIndex]\
                \} 
\fs22 \cf2 else
\fs28 \cf3  \{\
                    isPalidrome = chars[startIndex] 
\fs22 \cf4 ==
\fs28 \cf3  chars[endIndex] 
\fs22 \cf4 &&
\fs28 \cf3  isPalidromeMatrix[startIndex+
\fs22 1
\fs28 ][endIndex-
\fs22 1
\fs28 ]\
                \}\
                \
                
\fs22 \cf2 if
\fs28 \cf3  isPalidrome \{\
                    isPalidromeMatrix[startIndex][endIndex] = 
\fs22 \cf2 true
\fs28 \cf3 \
                    
\fs22 \cf2 if
\fs28 \cf3  palidromeLength > maxLength \{\
                        maxStartIndex = startIndex\
                        maxLength = palidromeLength\
                    \}\
                \}\
            \}\
        \}\
        
\fs22 \cf2 return
\fs28 \cf3  
\fs22 \cf4 String
\fs28 \cf3 (chars[maxStartIndex...maxStartIndex + maxLength - 
\fs22 1
\fs28 ])\
    \}}